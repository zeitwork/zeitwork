// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/test.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EdgeProxyAPI_GetHttpRoutes_FullMethodName   = "/fhr.zeitfun.EdgeProxyAPI/GetHttpRoutes"
	EdgeProxyAPI_UpsertHttpRoute_FullMethodName = "/fhr.zeitfun.EdgeProxyAPI/UpsertHttpRoute"
	EdgeProxyAPI_StreamChanges_FullMethodName   = "/fhr.zeitfun.EdgeProxyAPI/StreamChanges"
)

// EdgeProxyAPIClient is the client API for EdgeProxyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeProxyAPIClient interface {
	GetHttpRoutes(ctx context.Context, in *GetHttpRoutesRequest, opts ...grpc.CallOption) (*GetHttpRoutesResponse, error)
	UpsertHttpRoute(ctx context.Context, in *UpsertHttpRouteRequest, opts ...grpc.CallOption) (*UpsertHttpRouteResponse, error)
	StreamChanges(ctx context.Context, in *StreamChangesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Change], error)
}

type edgeProxyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeProxyAPIClient(cc grpc.ClientConnInterface) EdgeProxyAPIClient {
	return &edgeProxyAPIClient{cc}
}

func (c *edgeProxyAPIClient) GetHttpRoutes(ctx context.Context, in *GetHttpRoutesRequest, opts ...grpc.CallOption) (*GetHttpRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHttpRoutesResponse)
	err := c.cc.Invoke(ctx, EdgeProxyAPI_GetHttpRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeProxyAPIClient) UpsertHttpRoute(ctx context.Context, in *UpsertHttpRouteRequest, opts ...grpc.CallOption) (*UpsertHttpRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertHttpRouteResponse)
	err := c.cc.Invoke(ctx, EdgeProxyAPI_UpsertHttpRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeProxyAPIClient) StreamChanges(ctx context.Context, in *StreamChangesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Change], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EdgeProxyAPI_ServiceDesc.Streams[0], EdgeProxyAPI_StreamChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamChangesRequest, Change]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EdgeProxyAPI_StreamChangesClient = grpc.ServerStreamingClient[Change]

// EdgeProxyAPIServer is the server API for EdgeProxyAPI service.
// All implementations must embed UnimplementedEdgeProxyAPIServer
// for forward compatibility.
type EdgeProxyAPIServer interface {
	GetHttpRoutes(context.Context, *GetHttpRoutesRequest) (*GetHttpRoutesResponse, error)
	UpsertHttpRoute(context.Context, *UpsertHttpRouteRequest) (*UpsertHttpRouteResponse, error)
	StreamChanges(*StreamChangesRequest, grpc.ServerStreamingServer[Change]) error
	mustEmbedUnimplementedEdgeProxyAPIServer()
}

// UnimplementedEdgeProxyAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEdgeProxyAPIServer struct{}

func (UnimplementedEdgeProxyAPIServer) GetHttpRoutes(context.Context, *GetHttpRoutesRequest) (*GetHttpRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHttpRoutes not implemented")
}
func (UnimplementedEdgeProxyAPIServer) UpsertHttpRoute(context.Context, *UpsertHttpRouteRequest) (*UpsertHttpRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertHttpRoute not implemented")
}
func (UnimplementedEdgeProxyAPIServer) StreamChanges(*StreamChangesRequest, grpc.ServerStreamingServer[Change]) error {
	return status.Errorf(codes.Unimplemented, "method StreamChanges not implemented")
}
func (UnimplementedEdgeProxyAPIServer) mustEmbedUnimplementedEdgeProxyAPIServer() {}
func (UnimplementedEdgeProxyAPIServer) testEmbeddedByValue()                      {}

// UnsafeEdgeProxyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeProxyAPIServer will
// result in compilation errors.
type UnsafeEdgeProxyAPIServer interface {
	mustEmbedUnimplementedEdgeProxyAPIServer()
}

func RegisterEdgeProxyAPIServer(s grpc.ServiceRegistrar, srv EdgeProxyAPIServer) {
	// If the following call pancis, it indicates UnimplementedEdgeProxyAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EdgeProxyAPI_ServiceDesc, srv)
}

func _EdgeProxyAPI_GetHttpRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHttpRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeProxyAPIServer).GetHttpRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeProxyAPI_GetHttpRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeProxyAPIServer).GetHttpRoutes(ctx, req.(*GetHttpRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeProxyAPI_UpsertHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeProxyAPIServer).UpsertHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeProxyAPI_UpsertHttpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeProxyAPIServer).UpsertHttpRoute(ctx, req.(*UpsertHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeProxyAPI_StreamChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EdgeProxyAPIServer).StreamChanges(m, &grpc.GenericServerStream[StreamChangesRequest, Change]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EdgeProxyAPI_StreamChangesServer = grpc.ServerStreamingServer[Change]

// EdgeProxyAPI_ServiceDesc is the grpc.ServiceDesc for EdgeProxyAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeProxyAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fhr.zeitfun.EdgeProxyAPI",
	HandlerType: (*EdgeProxyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHttpRoutes",
			Handler:    _EdgeProxyAPI_GetHttpRoutes_Handler,
		},
		{
			MethodName: "UpsertHttpRoute",
			Handler:    _EdgeProxyAPI_UpsertHttpRoute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChanges",
			Handler:       _EdgeProxyAPI_StreamChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/test.proto",
}
