// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const httpProxyEndpointDelete = `-- name: HttpProxyEndpointDelete :one
delete from http_proxy_endpoints where id = $1 returning id, http_proxy_id, endpoint, healthy
`

func (q *Queries) HttpProxyEndpointDelete(ctx context.Context, id uuid.UUID) (HttpProxyEndpoints, error) {
	row := q.db.QueryRow(ctx, httpProxyEndpointDelete, id)
	var i HttpProxyEndpoints
	err := row.Scan(
		&i.ID,
		&i.HttpProxyID,
		&i.Endpoint,
		&i.Healthy,
	)
	return i, err
}

const httpProxyEndpointFindByID = `-- name: HttpProxyEndpointFindByID :one
select id, http_proxy_id, endpoint, healthy from http_proxy_endpoints where id = $1
`

func (q *Queries) HttpProxyEndpointFindByID(ctx context.Context, id uuid.UUID) (HttpProxyEndpoints, error) {
	row := q.db.QueryRow(ctx, httpProxyEndpointFindByID, id)
	var i HttpProxyEndpoints
	err := row.Scan(
		&i.ID,
		&i.HttpProxyID,
		&i.Endpoint,
		&i.Healthy,
	)
	return i, err
}

const httpProxyEndpointFindByProxyId = `-- name: HttpProxyEndpointFindByProxyId :many
select id, http_proxy_id, endpoint, healthy from http_proxy_endpoints where http_proxy_id = $1
`

func (q *Queries) HttpProxyEndpointFindByProxyId(ctx context.Context, httpProxyID uuid.UUID) ([]HttpProxyEndpoints, error) {
	rows, err := q.db.Query(ctx, httpProxyEndpointFindByProxyId, httpProxyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpProxyEndpoints
	for rows.Next() {
		var i HttpProxyEndpoints
		if err := rows.Scan(
			&i.ID,
			&i.HttpProxyID,
			&i.Endpoint,
			&i.Healthy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const httpProxyEndpointUpsert = `-- name: HttpProxyEndpointUpsert :one
insert into http_proxy_endpoints (http_proxy_id, endpoint, healthy) values ($1, $2, $3)
on conflict on constraint http_proxy_endpoints_http_proxy_id_endpoint_key do update SET http_proxy_id = $1, endpoint = $2, healthy = $3
returning id, http_proxy_id, endpoint, healthy
`

type HttpProxyEndpointUpsertParams struct {
	HttpProxyID uuid.UUID `db:"http_proxy_id" json:"httpProxyId"`
	Endpoint    string    `db:"endpoint" json:"endpoint"`
	Healthy     bool      `db:"healthy" json:"healthy"`
}

func (q *Queries) HttpProxyEndpointUpsert(ctx context.Context, arg HttpProxyEndpointUpsertParams) (HttpProxyEndpoints, error) {
	row := q.db.QueryRow(ctx, httpProxyEndpointUpsert, arg.HttpProxyID, arg.Endpoint, arg.Healthy)
	var i HttpProxyEndpoints
	err := row.Scan(
		&i.ID,
		&i.HttpProxyID,
		&i.Endpoint,
		&i.Healthy,
	)
	return i, err
}

const httpProxyFindAll = `-- name: HttpProxyFindAll :many
select id, created_at, updated_at, deleted_at, fqdn from http_proxies
`

func (q *Queries) HttpProxyFindAll(ctx context.Context) ([]HttpProxies, error) {
	rows, err := q.db.Query(ctx, httpProxyFindAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpProxies
	for rows.Next() {
		var i HttpProxies
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Fqdn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const httpProxyFindAllIDs = `-- name: HttpProxyFindAllIDs :many
select id from http_proxies
`

func (q *Queries) HttpProxyFindAllIDs(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, httpProxyFindAllIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const httpProxyFindByID = `-- name: HttpProxyFindByID :one
select id, created_at, updated_at, deleted_at, fqdn from http_proxies where id = $1
`

func (q *Queries) HttpProxyFindByID(ctx context.Context, id uuid.UUID) (HttpProxies, error) {
	row := q.db.QueryRow(ctx, httpProxyFindByID, id)
	var i HttpProxies
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Fqdn,
	)
	return i, err
}
