// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: github.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const githubInstallationCreate = `-- name: GithubInstallationCreate :one
INSERT INTO github_installations (id, github_installation_id, github_org_id, organisation_id, user_id) 
VALUES ($1, $2, $3, $4, $5) RETURNING id, github_installation_id, github_org_id, organisation_id, user_id, created_at, updated_at, deleted_at
`

type GithubInstallationCreateParams struct {
	ID                   int32       `json:"id"`
	GithubInstallationID int32       `json:"github_installation_id"`
	GithubOrgID          int32       `json:"github_org_id"`
	OrganisationID       pgtype.UUID `json:"organisation_id"`
	UserID               pgtype.UUID `json:"user_id"`
}

func (q *Queries) GithubInstallationCreate(ctx context.Context, arg *GithubInstallationCreateParams) (*GithubInstallation, error) {
	row := q.db.QueryRow(ctx, githubInstallationCreate,
		arg.ID,
		arg.GithubInstallationID,
		arg.GithubOrgID,
		arg.OrganisationID,
		arg.UserID,
	)
	var i GithubInstallation
	err := row.Scan(
		&i.ID,
		&i.GithubInstallationID,
		&i.GithubOrgID,
		&i.OrganisationID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const githubInstallationDelete = `-- name: GithubInstallationDelete :exec
DELETE FROM github_installations WHERE id = $1
`

func (q *Queries) GithubInstallationDelete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, githubInstallationDelete, id)
	return err
}

const githubInstallationFind = `-- name: GithubInstallationFind :many
SELECT id, github_installation_id, github_org_id, organisation_id, user_id, created_at, updated_at, deleted_at FROM github_installations ORDER BY created_at DESC
`

func (q *Queries) GithubInstallationFind(ctx context.Context) ([]*GithubInstallation, error) {
	rows, err := q.db.Query(ctx, githubInstallationFind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GithubInstallation
	for rows.Next() {
		var i GithubInstallation
		if err := rows.Scan(
			&i.ID,
			&i.GithubInstallationID,
			&i.GithubOrgID,
			&i.OrganisationID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const githubInstallationFindById = `-- name: GithubInstallationFindById :one
SELECT id, github_installation_id, github_org_id, organisation_id, user_id, created_at, updated_at, deleted_at FROM github_installations WHERE id = $1
`

func (q *Queries) GithubInstallationFindById(ctx context.Context, id int32) (*GithubInstallation, error) {
	row := q.db.QueryRow(ctx, githubInstallationFindById, id)
	var i GithubInstallation
	err := row.Scan(
		&i.ID,
		&i.GithubInstallationID,
		&i.GithubOrgID,
		&i.OrganisationID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const githubInstallationFindByInstallationId = `-- name: GithubInstallationFindByInstallationId :one
SELECT id, github_installation_id, github_org_id, organisation_id, user_id, created_at, updated_at, deleted_at FROM github_installations WHERE github_installation_id = $1
`

func (q *Queries) GithubInstallationFindByInstallationId(ctx context.Context, githubInstallationID int32) (*GithubInstallation, error) {
	row := q.db.QueryRow(ctx, githubInstallationFindByInstallationId, githubInstallationID)
	var i GithubInstallation
	err := row.Scan(
		&i.ID,
		&i.GithubInstallationID,
		&i.GithubOrgID,
		&i.OrganisationID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const githubInstallationFindByOrganisation = `-- name: GithubInstallationFindByOrganisation :many
SELECT id, github_installation_id, github_org_id, organisation_id, user_id, created_at, updated_at, deleted_at FROM github_installations WHERE organisation_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GithubInstallationFindByOrganisation(ctx context.Context, organisationID pgtype.UUID) ([]*GithubInstallation, error) {
	rows, err := q.db.Query(ctx, githubInstallationFindByOrganisation, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GithubInstallation
	for rows.Next() {
		var i GithubInstallation
		if err := rows.Scan(
			&i.ID,
			&i.GithubInstallationID,
			&i.GithubOrgID,
			&i.OrganisationID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const githubInstallationFindByUser = `-- name: GithubInstallationFindByUser :many
SELECT id, github_installation_id, github_org_id, organisation_id, user_id, created_at, updated_at, deleted_at FROM github_installations WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GithubInstallationFindByUser(ctx context.Context, userID pgtype.UUID) ([]*GithubInstallation, error) {
	rows, err := q.db.Query(ctx, githubInstallationFindByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GithubInstallation
	for rows.Next() {
		var i GithubInstallation
		if err := rows.Scan(
			&i.ID,
			&i.GithubInstallationID,
			&i.GithubOrgID,
			&i.OrganisationID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const githubInstallationUpdate = `-- name: GithubInstallationUpdate :one
UPDATE github_installations SET organisation_id = $2, user_id = $3, updated_at = NOW() WHERE id = $1 RETURNING id, github_installation_id, github_org_id, organisation_id, user_id, created_at, updated_at, deleted_at
`

type GithubInstallationUpdateParams struct {
	ID             int32       `json:"id"`
	OrganisationID pgtype.UUID `json:"organisation_id"`
	UserID         pgtype.UUID `json:"user_id"`
}

func (q *Queries) GithubInstallationUpdate(ctx context.Context, arg *GithubInstallationUpdateParams) (*GithubInstallation, error) {
	row := q.db.QueryRow(ctx, githubInstallationUpdate, arg.ID, arg.OrganisationID, arg.UserID)
	var i GithubInstallation
	err := row.Scan(
		&i.ID,
		&i.GithubInstallationID,
		&i.GithubOrgID,
		&i.OrganisationID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
