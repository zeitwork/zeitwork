// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: regions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const regionsCreate = `-- name: RegionsCreate :one
INSERT INTO regions (
    id,
    name,
    code,
    country
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING 
    id,
    name,
    code,
    country,
    created_at,
    updated_at
`

type RegionsCreateParams struct {
	ID      pgtype.UUID `json:"id"`
	Name    string      `json:"name"`
	Code    string      `json:"code"`
	Country string      `json:"country"`
}

type RegionsCreateRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Code      string             `json:"code"`
	Country   string             `json:"country"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Create a new region
func (q *Queries) RegionsCreate(ctx context.Context, arg *RegionsCreateParams) (*RegionsCreateRow, error) {
	row := q.db.QueryRow(ctx, regionsCreate,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.Country,
	)
	var i RegionsCreateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const regionsGetAll = `-- name: RegionsGetAll :many
SELECT 
    id,
    name,
    code,
    country,
    created_at,
    updated_at
FROM regions 
WHERE deleted_at IS NULL
ORDER BY name ASC
`

type RegionsGetAllRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Code      string             `json:"code"`
	Country   string             `json:"country"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get all regions
func (q *Queries) RegionsGetAll(ctx context.Context) ([]*RegionsGetAllRow, error) {
	rows, err := q.db.Query(ctx, regionsGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RegionsGetAllRow
	for rows.Next() {
		var i RegionsGetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const regionsGetByCode = `-- name: RegionsGetByCode :one
SELECT 
    id,
    name,
    code,
    country,
    created_at,
    updated_at
FROM regions 
WHERE code = $1 
    AND deleted_at IS NULL
`

type RegionsGetByCodeRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Code      string             `json:"code"`
	Country   string             `json:"country"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get region by code
func (q *Queries) RegionsGetByCode(ctx context.Context, code string) (*RegionsGetByCodeRow, error) {
	row := q.db.QueryRow(ctx, regionsGetByCode, code)
	var i RegionsGetByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const regionsGetById = `-- name: RegionsGetById :one
SELECT 
    id,
    name,
    code,
    country,
    created_at,
    updated_at
FROM regions 
WHERE id = $1 
    AND deleted_at IS NULL
`

type RegionsGetByIdRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Code      string             `json:"code"`
	Country   string             `json:"country"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get region by ID
func (q *Queries) RegionsGetById(ctx context.Context, id pgtype.UUID) (*RegionsGetByIdRow, error) {
	row := q.db.QueryRow(ctx, regionsGetById, id)
	var i RegionsGetByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
