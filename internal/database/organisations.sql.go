// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: organisations.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const organisationsCreate = `-- name: OrganisationsCreate :one
INSERT INTO organisations (
    id,
    name,
    slug
) VALUES (
    $1,
    $2,
    $3
)
RETURNING 
    id,
    name,
    slug,
    created_at,
    updated_at
`

type OrganisationsCreateParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
	Slug string      `json:"slug"`
}

type OrganisationsCreateRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Create a new organisation
func (q *Queries) OrganisationsCreate(ctx context.Context, arg *OrganisationsCreateParams) (*OrganisationsCreateRow, error) {
	row := q.db.QueryRow(ctx, organisationsCreate, arg.ID, arg.Name, arg.Slug)
	var i OrganisationsCreateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const organisationsGetAll = `-- name: OrganisationsGetAll :many
SELECT 
    id,
    name,
    slug,
    created_at,
    updated_at
FROM organisations 
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

type OrganisationsGetAllRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get all organisations
func (q *Queries) OrganisationsGetAll(ctx context.Context) ([]*OrganisationsGetAllRow, error) {
	rows, err := q.db.Query(ctx, organisationsGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OrganisationsGetAllRow
	for rows.Next() {
		var i OrganisationsGetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const organisationsGetById = `-- name: OrganisationsGetById :one
SELECT 
    id,
    name,
    slug,
    created_at,
    updated_at
FROM organisations 
WHERE id = $1 
    AND deleted_at IS NULL
`

type OrganisationsGetByIdRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get organisation by ID
func (q *Queries) OrganisationsGetById(ctx context.Context, id pgtype.UUID) (*OrganisationsGetByIdRow, error) {
	row := q.db.QueryRow(ctx, organisationsGetById, id)
	var i OrganisationsGetByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const organisationsGetBySlug = `-- name: OrganisationsGetBySlug :one
SELECT 
    id,
    name,
    slug,
    created_at,
    updated_at
FROM organisations 
WHERE slug = $1 
    AND deleted_at IS NULL
`

type OrganisationsGetBySlugRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get organisation by slug
func (q *Queries) OrganisationsGetBySlug(ctx context.Context, slug string) (*OrganisationsGetBySlugRow, error) {
	row := q.db.QueryRow(ctx, organisationsGetBySlug, slug)
	var i OrganisationsGetBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
