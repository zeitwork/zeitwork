// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: instances.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getInstanceByID = `-- name: GetInstanceByID :one
SELECT 
    i.id,
    i.region_id,
    i.node_id,
    i.image_id,
    i.state,
    i.vcpus,
    i.memory,
    i.default_port,
    i.ip_address,
    i.environment_variables,
    i.created_at,
    i.updated_at,
    img.name as image_name,
    img.hash as image_hash
FROM instances i
INNER JOIN images img ON i.image_id = img.id
WHERE i.id = $1
`

type GetInstanceByIDRow struct {
	ID                   pgtype.UUID        `json:"id"`
	RegionID             pgtype.UUID        `json:"region_id"`
	NodeID               pgtype.UUID        `json:"node_id"`
	ImageID              pgtype.UUID        `json:"image_id"`
	State                InstanceStatuses   `json:"state"`
	Vcpus                int32              `json:"vcpus"`
	Memory               int32              `json:"memory"`
	DefaultPort          int32              `json:"default_port"`
	IpAddress            string             `json:"ip_address"`
	EnvironmentVariables string             `json:"environment_variables"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	ImageName            string             `json:"image_name"`
	ImageHash            string             `json:"image_hash"`
}

func (q *Queries) GetInstanceByID(ctx context.Context, id pgtype.UUID) (*GetInstanceByIDRow, error) {
	row := q.db.QueryRow(ctx, getInstanceByID, id)
	var i GetInstanceByIDRow
	err := row.Scan(
		&i.ID,
		&i.RegionID,
		&i.NodeID,
		&i.ImageID,
		&i.State,
		&i.Vcpus,
		&i.Memory,
		&i.DefaultPort,
		&i.IpAddress,
		&i.EnvironmentVariables,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageName,
		&i.ImageHash,
	)
	return &i, err
}

const getInstancesByNodeID = `-- name: GetInstancesByNodeID :many
SELECT 
    i.id,
    i.region_id,
    i.node_id,
    i.image_id,
    i.state,
    i.vcpus,
    i.memory,
    i.default_port,
    i.ip_address,
    i.environment_variables,
    i.created_at,
    i.updated_at,
    img.name as image_name,
    img.hash as image_hash
FROM instances i
INNER JOIN images img ON i.image_id = img.id
WHERE i.node_id = $1
ORDER BY i.created_at DESC
`

type GetInstancesByNodeIDRow struct {
	ID                   pgtype.UUID        `json:"id"`
	RegionID             pgtype.UUID        `json:"region_id"`
	NodeID               pgtype.UUID        `json:"node_id"`
	ImageID              pgtype.UUID        `json:"image_id"`
	State                InstanceStatuses   `json:"state"`
	Vcpus                int32              `json:"vcpus"`
	Memory               int32              `json:"memory"`
	DefaultPort          int32              `json:"default_port"`
	IpAddress            string             `json:"ip_address"`
	EnvironmentVariables string             `json:"environment_variables"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	ImageName            string             `json:"image_name"`
	ImageHash            string             `json:"image_hash"`
}

func (q *Queries) GetInstancesByNodeID(ctx context.Context, nodeID pgtype.UUID) ([]*GetInstancesByNodeIDRow, error) {
	rows, err := q.db.Query(ctx, getInstancesByNodeID, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetInstancesByNodeIDRow
	for rows.Next() {
		var i GetInstancesByNodeIDRow
		if err := rows.Scan(
			&i.ID,
			&i.RegionID,
			&i.NodeID,
			&i.ImageID,
			&i.State,
			&i.Vcpus,
			&i.Memory,
			&i.DefaultPort,
			&i.IpAddress,
			&i.EnvironmentVariables,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageName,
			&i.ImageHash,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstanceState = `-- name: UpdateInstanceState :exec
UPDATE instances
SET state = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateInstanceStateParams struct {
	ID    pgtype.UUID      `json:"id"`
	State InstanceStatuses `json:"state"`
}

func (q *Queries) UpdateInstanceState(ctx context.Context, arg *UpdateInstanceStateParams) error {
	_, err := q.db.Exec(ctx, updateInstanceState, arg.ID, arg.State)
	return err
}
