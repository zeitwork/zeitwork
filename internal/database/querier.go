// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Create a new deployment instance relationship
	DeploymentInstancesCreate(ctx context.Context, arg *DeploymentInstancesCreateParams) (*DeploymentInstancesCreateRow, error)
	// Soft delete a deployment instance
	DeploymentInstancesDelete(ctx context.Context, id pgtype.UUID) error
	// Get deployment instances by deployment ID
	DeploymentInstancesGetByDeployment(ctx context.Context, deploymentID pgtype.UUID) ([]*DeploymentInstancesGetByDeploymentRow, error)
	// Get deployment instance by instance ID
	DeploymentInstancesGetByInstance(ctx context.Context, instanceID pgtype.UUID) (*DeploymentInstancesGetByInstanceRow, error)
	// Create a new deployment
	DeploymentsCreate(ctx context.Context, arg *DeploymentsCreateParams) (*DeploymentsCreateRow, error)
	// Get active deployment routes for edge proxy
	DeploymentsGetActiveRoutes(ctx context.Context) ([]*DeploymentsGetActiveRoutesRow, error)
	// Get deployment by ID
	DeploymentsGetById(ctx context.Context, id pgtype.UUID) (*DeploymentsGetByIdRow, error)
	// Get deployment by linked image_build_id
	DeploymentsGetByImageBuildId(ctx context.Context, imageBuildID pgtype.UUID) (*DeploymentsGetByImageBuildIdRow, error)
	// Get deployments by project ID
	DeploymentsGetByProject(ctx context.Context, projectID pgtype.UUID) ([]*DeploymentsGetByProjectRow, error)
	// Get pending deployments that don't have any image builds yet
	DeploymentsGetPendingWithoutBuilds(ctx context.Context) ([]*DeploymentsGetPendingWithoutBuildsRow, error)
	// Get deployments that have completed builds but no instances yet (ready for deployment)
	DeploymentsGetReadyForDeployment(ctx context.Context) ([]*DeploymentsGetReadyForDeploymentRow, error)
	// Update deployment image_build_id after creating build
	DeploymentsUpdateImageBuildId(ctx context.Context, arg *DeploymentsUpdateImageBuildIdParams) (*DeploymentsUpdateImageBuildIdRow, error)
	// Update deployment image_id after successful build
	DeploymentsUpdateImageId(ctx context.Context, arg *DeploymentsUpdateImageIdParams) (*DeploymentsUpdateImageIdRow, error)
	// Update deployment status
	DeploymentsUpdateStatus(ctx context.Context, arg *DeploymentsUpdateStatusParams) (*DeploymentsUpdateStatusRow, error)
	// Create a new domain
	DomainsCreate(ctx context.Context, arg *DomainsCreateParams) (*DomainsCreateRow, error)
	// Get domains by deployment
	DomainsGetByDeployment(ctx context.Context, deploymentID pgtype.UUID) ([]*DomainsGetByDeploymentRow, error)
	// Get domain by ID
	DomainsGetById(ctx context.Context, id pgtype.UUID) (*DomainsGetByIdRow, error)
	// Get domain by name
	DomainsGetByName(ctx context.Context, name string) (*DomainsGetByNameRow, error)
	// List all domains regardless of verification
	DomainsListAll(ctx context.Context) ([]*DomainsListAllRow, error)
	// List all verified domains
	DomainsListVerified(ctx context.Context) ([]*DomainsListVerifiedRow, error)
	// Mark domain as verified
	DomainsVerify(ctx context.Context, id pgtype.UUID) (*DomainsVerifyRow, error)
	// Mark an image build as completed
	ImageBuildsComplete(ctx context.Context, id pgtype.UUID) (*ImageBuildsCompleteRow, error)
	// Create a new image build
	ImageBuildsCreate(ctx context.Context, arg *ImageBuildsCreateParams) (*ImageBuildsCreateRow, error)
	// Get the oldest pending image build and mark it as building
	ImageBuildsDequeuePending(ctx context.Context) (*ImageBuildsDequeuePendingRow, error)
	// Mark an image build as failed
	ImageBuildsFail(ctx context.Context, id pgtype.UUID) (*ImageBuildsFailRow, error)
	// Get image build by ID
	ImageBuildsGetById(ctx context.Context, id pgtype.UUID) (*ImageBuildsGetByIdRow, error)
	// Reset builds that have been "building" for too long (using minutes parameter)
	ImageBuildsResetStale(ctx context.Context, dollar_1 pgtype.Text) ([]*ImageBuildsResetStaleRow, error)
	// Create a new image
	ImagesCreate(ctx context.Context, arg *ImagesCreateParams) (*ImagesCreateRow, error)
	// Get all images
	ImagesGetAll(ctx context.Context) ([]*ImagesGetAllRow, error)
	// Get image by hash
	ImagesGetByHash(ctx context.Context, hash string) (*ImagesGetByHashRow, error)
	// Get image by ID
	ImagesGetById(ctx context.Context, id pgtype.UUID) (*ImagesGetByIdRow, error)
	// Update image
	ImagesUpdate(ctx context.Context, arg *ImagesUpdateParams) (*ImagesUpdateRow, error)
	// Create a new instance
	InstancesCreate(ctx context.Context, arg *InstancesCreateParams) (*InstancesCreateRow, error)
	// Soft delete an instance
	InstancesDelete(ctx context.Context, id pgtype.UUID) error
	// Find instances by node ID for node agent
	InstancesFindByNode(ctx context.Context, nodeID pgtype.UUID) ([]*InstancesFindByNodeRow, error)
	// Get instances for a deployment
	InstancesGetByDeployment(ctx context.Context, deploymentID pgtype.UUID) ([]*InstancesGetByDeploymentRow, error)
	// Get instance by ID
	InstancesGetById(ctx context.Context, id pgtype.UUID) (*InstancesGetByIdRow, error)
	// Update instance IP address after container creation
	InstancesUpdateIpAddress(ctx context.Context, arg *InstancesUpdateIpAddressParams) (*InstancesUpdateIpAddressRow, error)
	// Update instance state
	InstancesUpdateState(ctx context.Context, arg *InstancesUpdateStateParams) (*InstancesUpdateStateRow, error)
	// Create a new node
	NodesCreate(ctx context.Context, arg *NodesCreateParams) (*NodesCreateRow, error)
	// Get all nodes
	NodesGetAll(ctx context.Context) ([]*NodesGetAllRow, error)
	// Get node by hostname
	NodesGetByHostname(ctx context.Context, hostname string) (*NodesGetByHostnameRow, error)
	// Get node by ID
	NodesGetById(ctx context.Context, id pgtype.UUID) (*NodesGetByIdRow, error)
	// Get nodes by region
	NodesGetByRegion(ctx context.Context, regionID pgtype.UUID) ([]*NodesGetByRegionRow, error)
	// Update node state
	NodesUpdateState(ctx context.Context, arg *NodesUpdateStateParams) (*NodesUpdateStateRow, error)
	// Create a new organisation
	OrganisationsCreate(ctx context.Context, arg *OrganisationsCreateParams) (*OrganisationsCreateRow, error)
	// Get all organisations
	OrganisationsGetAll(ctx context.Context) ([]*OrganisationsGetAllRow, error)
	// Get organisation by ID
	OrganisationsGetById(ctx context.Context, id pgtype.UUID) (*OrganisationsGetByIdRow, error)
	// Get organisation by slug
	OrganisationsGetBySlug(ctx context.Context, slug string) (*OrganisationsGetBySlugRow, error)
	// Create a new project
	ProjectsCreate(ctx context.Context, arg *ProjectsCreateParams) (*ProjectsCreateRow, error)
	// Get project by ID
	ProjectsGetById(ctx context.Context, id pgtype.UUID) (*ProjectsGetByIdRow, error)
	// Get projects by organisation
	ProjectsGetByOrganisation(ctx context.Context, organisationID pgtype.UUID) ([]*ProjectsGetByOrganisationRow, error)
	// Get project by slug and organisation
	ProjectsGetBySlugAndOrg(ctx context.Context, arg *ProjectsGetBySlugAndOrgParams) (*ProjectsGetBySlugAndOrgRow, error)
	// Create a new region
	RegionsCreate(ctx context.Context, arg *RegionsCreateParams) (*RegionsCreateRow, error)
	// Get all regions
	RegionsGetAll(ctx context.Context) ([]*RegionsGetAllRow, error)
	// Get region by code
	RegionsGetByCode(ctx context.Context, code string) (*RegionsGetByCodeRow, error)
	// Get region by ID
	RegionsGetById(ctx context.Context, id pgtype.UUID) (*RegionsGetByIdRow, error)
	SslCertsDelete(ctx context.Context, key string) (int64, error)
	// SSL certificates and locks queries for CertManager and DB-backed storage
	SslCertsGetById(ctx context.Context, id pgtype.UUID) (*SslCertsGetByIdRow, error)
	SslCertsGetByKey(ctx context.Context, key string) (*SslCertsGetByKeyRow, error)
	SslCertsListPrefix(ctx context.Context, dollar_1 pgtype.Text) ([]string, error)
	SslCertsStat(ctx context.Context, key string) (*SslCertsStatRow, error)
	SslCertsUpsert(ctx context.Context, arg *SslCertsUpsertParams) (*SslCertsUpsertRow, error)
	SslLocksRelease(ctx context.Context, key string) (int64, error)
	// Locking helpers
	SslLocksTryAcquire(ctx context.Context, arg *SslLocksTryAcquireParams) (pgtype.UUID, error)
}

var _ Querier = (*Queries)(nil)
