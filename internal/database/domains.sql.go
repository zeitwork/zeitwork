// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: domains.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const domainsCreate = `-- name: DomainsCreate :one
INSERT INTO domains (
    id,
    name,
    verification_token,
    deployment_id,
    internal,
    organisation_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING 
    id,
    name,
    verification_token,
    verified_at,
    deployment_id,
    internal,
    organisation_id,
    created_at,
    updated_at
`

type DomainsCreateParams struct {
	ID                pgtype.UUID `json:"id"`
	Name              string      `json:"name"`
	VerificationToken pgtype.Text `json:"verification_token"`
	DeploymentID      pgtype.UUID `json:"deployment_id"`
	Internal          bool        `json:"internal"`
	OrganisationID    pgtype.UUID `json:"organisation_id"`
}

type DomainsCreateRow struct {
	ID                pgtype.UUID        `json:"id"`
	Name              string             `json:"name"`
	VerificationToken pgtype.Text        `json:"verification_token"`
	VerifiedAt        pgtype.Timestamptz `json:"verified_at"`
	DeploymentID      pgtype.UUID        `json:"deployment_id"`
	Internal          bool               `json:"internal"`
	OrganisationID    pgtype.UUID        `json:"organisation_id"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

// Create a new domain
func (q *Queries) DomainsCreate(ctx context.Context, arg *DomainsCreateParams) (*DomainsCreateRow, error) {
	row := q.db.QueryRow(ctx, domainsCreate,
		arg.ID,
		arg.Name,
		arg.VerificationToken,
		arg.DeploymentID,
		arg.Internal,
		arg.OrganisationID,
	)
	var i DomainsCreateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.VerificationToken,
		&i.VerifiedAt,
		&i.DeploymentID,
		&i.Internal,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const domainsGetByDeployment = `-- name: DomainsGetByDeployment :many
SELECT 
    id,
    name,
    verification_token,
    verified_at,
    deployment_id,
    internal,
    organisation_id,
    created_at,
    updated_at
FROM domains 
WHERE deployment_id = $1 
    AND deleted_at IS NULL
`

type DomainsGetByDeploymentRow struct {
	ID                pgtype.UUID        `json:"id"`
	Name              string             `json:"name"`
	VerificationToken pgtype.Text        `json:"verification_token"`
	VerifiedAt        pgtype.Timestamptz `json:"verified_at"`
	DeploymentID      pgtype.UUID        `json:"deployment_id"`
	Internal          bool               `json:"internal"`
	OrganisationID    pgtype.UUID        `json:"organisation_id"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

// Get domains by deployment
func (q *Queries) DomainsGetByDeployment(ctx context.Context, deploymentID pgtype.UUID) ([]*DomainsGetByDeploymentRow, error) {
	rows, err := q.db.Query(ctx, domainsGetByDeployment, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DomainsGetByDeploymentRow
	for rows.Next() {
		var i DomainsGetByDeploymentRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.VerificationToken,
			&i.VerifiedAt,
			&i.DeploymentID,
			&i.Internal,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const domainsGetById = `-- name: DomainsGetById :one
SELECT 
    id,
    name,
    verification_token,
    verified_at,
    deployment_id,
    internal,
    organisation_id,
    created_at,
    updated_at
FROM domains 
WHERE id = $1 
    AND deleted_at IS NULL
`

type DomainsGetByIdRow struct {
	ID                pgtype.UUID        `json:"id"`
	Name              string             `json:"name"`
	VerificationToken pgtype.Text        `json:"verification_token"`
	VerifiedAt        pgtype.Timestamptz `json:"verified_at"`
	DeploymentID      pgtype.UUID        `json:"deployment_id"`
	Internal          bool               `json:"internal"`
	OrganisationID    pgtype.UUID        `json:"organisation_id"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

// Get domain by ID
func (q *Queries) DomainsGetById(ctx context.Context, id pgtype.UUID) (*DomainsGetByIdRow, error) {
	row := q.db.QueryRow(ctx, domainsGetById, id)
	var i DomainsGetByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.VerificationToken,
		&i.VerifiedAt,
		&i.DeploymentID,
		&i.Internal,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const domainsGetByName = `-- name: DomainsGetByName :one
SELECT 
    id,
    name,
    verification_token,
    verified_at,
    deployment_id,
    internal,
    organisation_id,
    created_at,
    updated_at
FROM domains 
WHERE name = $1 
    AND deleted_at IS NULL
`

type DomainsGetByNameRow struct {
	ID                pgtype.UUID        `json:"id"`
	Name              string             `json:"name"`
	VerificationToken pgtype.Text        `json:"verification_token"`
	VerifiedAt        pgtype.Timestamptz `json:"verified_at"`
	DeploymentID      pgtype.UUID        `json:"deployment_id"`
	Internal          bool               `json:"internal"`
	OrganisationID    pgtype.UUID        `json:"organisation_id"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

// Get domain by name
func (q *Queries) DomainsGetByName(ctx context.Context, name string) (*DomainsGetByNameRow, error) {
	row := q.db.QueryRow(ctx, domainsGetByName, name)
	var i DomainsGetByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.VerificationToken,
		&i.VerifiedAt,
		&i.DeploymentID,
		&i.Internal,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const domainsVerify = `-- name: DomainsVerify :one
UPDATE domains 
SET verified_at = now(), 
    updated_at = now()
WHERE id = $1
RETURNING 
    id,
    name,
    verification_token,
    verified_at,
    deployment_id,
    internal,
    organisation_id,
    created_at,
    updated_at
`

type DomainsVerifyRow struct {
	ID                pgtype.UUID        `json:"id"`
	Name              string             `json:"name"`
	VerificationToken pgtype.Text        `json:"verification_token"`
	VerifiedAt        pgtype.Timestamptz `json:"verified_at"`
	DeploymentID      pgtype.UUID        `json:"deployment_id"`
	Internal          bool               `json:"internal"`
	OrganisationID    pgtype.UUID        `json:"organisation_id"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

// Mark domain as verified
func (q *Queries) DomainsVerify(ctx context.Context, id pgtype.UUID) (*DomainsVerifyRow, error) {
	row := q.db.QueryRow(ctx, domainsVerify, id)
	var i DomainsVerifyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.VerificationToken,
		&i.VerifiedAt,
		&i.DeploymentID,
		&i.Internal,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
