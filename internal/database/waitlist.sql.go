// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: waitlist.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const waitlistCreate = `-- name: WaitlistCreate :one
INSERT INTO waitlist (email) VALUES ($1) RETURNING id, email, created_at, updated_at, deleted_at
`

func (q *Queries) WaitlistCreate(ctx context.Context, email string) (*Waitlist, error) {
	row := q.db.QueryRow(ctx, waitlistCreate, email)
	var i Waitlist
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const waitlistDelete = `-- name: WaitlistDelete :exec
DELETE FROM waitlist WHERE id = $1
`

func (q *Queries) WaitlistDelete(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, waitlistDelete, id)
	return err
}

const waitlistDeleteByEmail = `-- name: WaitlistDeleteByEmail :exec
DELETE FROM waitlist WHERE email = $1
`

func (q *Queries) WaitlistDeleteByEmail(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, waitlistDeleteByEmail, email)
	return err
}

const waitlistFind = `-- name: WaitlistFind :many
SELECT id, email, created_at, updated_at, deleted_at FROM waitlist ORDER BY created_at DESC
`

func (q *Queries) WaitlistFind(ctx context.Context) ([]*Waitlist, error) {
	rows, err := q.db.Query(ctx, waitlistFind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Waitlist
	for rows.Next() {
		var i Waitlist
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const waitlistFindByEmail = `-- name: WaitlistFindByEmail :one
SELECT id, email, created_at, updated_at, deleted_at FROM waitlist WHERE email = $1
`

func (q *Queries) WaitlistFindByEmail(ctx context.Context, email string) (*Waitlist, error) {
	row := q.db.QueryRow(ctx, waitlistFindByEmail, email)
	var i Waitlist
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const waitlistFindById = `-- name: WaitlistFindById :one
SELECT id, email, created_at, updated_at, deleted_at FROM waitlist WHERE id = $1
`

func (q *Queries) WaitlistFindById(ctx context.Context, id pgtype.UUID) (*Waitlist, error) {
	row := q.db.QueryRow(ctx, waitlistFindById, id)
	var i Waitlist
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
