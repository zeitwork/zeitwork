// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DeploymentStatuses string

const (
	DeploymentStatusesPending   DeploymentStatuses = "pending"
	DeploymentStatusesBuilding  DeploymentStatuses = "building"
	DeploymentStatusesDeploying DeploymentStatuses = "deploying"
	DeploymentStatusesActive    DeploymentStatuses = "active"
	DeploymentStatusesInactive  DeploymentStatuses = "inactive"
	DeploymentStatusesFailed    DeploymentStatuses = "failed"
)

func (e *DeploymentStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeploymentStatuses(s)
	case string:
		*e = DeploymentStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for DeploymentStatuses: %T", src)
	}
	return nil
}

type NullDeploymentStatuses struct {
	DeploymentStatuses DeploymentStatuses `json:"deployment_statuses"`
	Valid              bool               `json:"valid"` // Valid is true if DeploymentStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeploymentStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.DeploymentStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeploymentStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeploymentStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeploymentStatuses), nil
}

type ImageBuildStatus string

const (
	ImageBuildStatusPending   ImageBuildStatus = "pending"
	ImageBuildStatusBuilding  ImageBuildStatus = "building"
	ImageBuildStatusCompleted ImageBuildStatus = "completed"
	ImageBuildStatusFailed    ImageBuildStatus = "failed"
)

func (e *ImageBuildStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageBuildStatus(s)
	case string:
		*e = ImageBuildStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageBuildStatus: %T", src)
	}
	return nil
}

type NullImageBuildStatus struct {
	ImageBuildStatus ImageBuildStatus `json:"image_build_status"`
	Valid            bool             `json:"valid"` // Valid is true if ImageBuildStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageBuildStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ImageBuildStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageBuildStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageBuildStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImageBuildStatus), nil
}

type InstanceStatuses string

const (
	InstanceStatusesPending    InstanceStatuses = "pending"
	InstanceStatusesStarting   InstanceStatuses = "starting"
	InstanceStatusesRunning    InstanceStatuses = "running"
	InstanceStatusesStopping   InstanceStatuses = "stopping"
	InstanceStatusesStopped    InstanceStatuses = "stopped"
	InstanceStatusesFailed     InstanceStatuses = "failed"
	InstanceStatusesTerminated InstanceStatuses = "terminated"
)

func (e *InstanceStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InstanceStatuses(s)
	case string:
		*e = InstanceStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for InstanceStatuses: %T", src)
	}
	return nil
}

type NullInstanceStatuses struct {
	InstanceStatuses InstanceStatuses `json:"instance_statuses"`
	Valid            bool             `json:"valid"` // Valid is true if InstanceStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInstanceStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.InstanceStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InstanceStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInstanceStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InstanceStatuses), nil
}

type Deployment struct {
	ID             pgtype.UUID        `json:"id"`
	DeploymentID   string             `json:"deployment_id"`
	Status         DeploymentStatuses `json:"status"`
	GithubCommit   string             `json:"github_commit"`
	ProjectID      pgtype.UUID        `json:"project_id"`
	EnvironmentID  pgtype.UUID        `json:"environment_id"`
	ImageID        pgtype.UUID        `json:"image_id"`
	ImageBuildID   pgtype.UUID        `json:"image_build_id"`
	OrganisationID pgtype.UUID        `json:"organisation_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

type DeploymentInstance struct {
	ID             pgtype.UUID        `json:"id"`
	DeploymentID   pgtype.UUID        `json:"deployment_id"`
	InstanceID     pgtype.UUID        `json:"instance_id"`
	OrganisationID pgtype.UUID        `json:"organisation_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

type Domain struct {
	ID                pgtype.UUID        `json:"id"`
	Name              string             `json:"name"`
	VerificationToken pgtype.Text        `json:"verification_token"`
	VerifiedAt        pgtype.Timestamptz `json:"verified_at"`
	DeploymentID      pgtype.UUID        `json:"deployment_id"`
	Internal          bool               `json:"internal"`
	OrganisationID    pgtype.UUID        `json:"organisation_id"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	DeletedAt         pgtype.Timestamptz `json:"deleted_at"`
}

type EnvironmentDomain struct {
	ID             pgtype.UUID        `json:"id"`
	DomainID       pgtype.UUID        `json:"domain_id"`
	ProjectID      pgtype.UUID        `json:"project_id"`
	EnvironmentID  pgtype.UUID        `json:"environment_id"`
	OrganisationID pgtype.UUID        `json:"organisation_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

type EnvironmentVariable struct {
	ID             pgtype.UUID        `json:"id"`
	Name           string             `json:"name"`
	Value          string             `json:"value"`
	ProjectID      pgtype.UUID        `json:"project_id"`
	EnvironmentID  pgtype.UUID        `json:"environment_id"`
	OrganisationID pgtype.UUID        `json:"organisation_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

type GithubInstallation struct {
	ID                   pgtype.UUID        `json:"id"`
	UserID               pgtype.UUID        `json:"user_id"`
	GithubAccountID      int32              `json:"github_account_id"`
	GithubInstallationID int32              `json:"github_installation_id"`
	OrganisationID       pgtype.UUID        `json:"organisation_id"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	DeletedAt            pgtype.Timestamptz `json:"deleted_at"`
}

type Image struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Size      pgtype.Int4        `json:"size"`
	Hash      string             `json:"hash"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type ImageBuild struct {
	ID               pgtype.UUID        `json:"id"`
	Status           ImageBuildStatus   `json:"status"`
	GithubRepository string             `json:"github_repository"`
	GithubCommit     string             `json:"github_commit"`
	ImageID          pgtype.UUID        `json:"image_id"`
	StartedAt        pgtype.Timestamptz `json:"started_at"`
	CompletedAt      pgtype.Timestamptz `json:"completed_at"`
	FailedAt         pgtype.Timestamptz `json:"failed_at"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	DeletedAt        pgtype.Timestamptz `json:"deleted_at"`
}

type Instance struct {
	ID                   pgtype.UUID        `json:"id"`
	RegionID             pgtype.UUID        `json:"region_id"`
	NodeID               pgtype.UUID        `json:"node_id"`
	ImageID              pgtype.UUID        `json:"image_id"`
	State                InstanceStatuses   `json:"state"`
	Vcpus                int32              `json:"vcpus"`
	Memory               int32              `json:"memory"`
	DefaultPort          int32              `json:"default_port"`
	IpAddress            string             `json:"ip_address"`
	EnvironmentVariables string             `json:"environment_variables"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	DeletedAt            pgtype.Timestamptz `json:"deleted_at"`
}

type Node struct {
	ID        pgtype.UUID        `json:"id"`
	RegionID  pgtype.UUID        `json:"region_id"`
	Hostname  string             `json:"hostname"`
	IpAddress string             `json:"ip_address"`
	State     string             `json:"state"`
	Resources json.RawMessage    `json:"resources"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Organisation struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type OrganisationMember struct {
	ID             pgtype.UUID        `json:"id"`
	UserID         pgtype.UUID        `json:"user_id"`
	OrganisationID pgtype.UUID        `json:"organisation_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

type Project struct {
	ID                   pgtype.UUID        `json:"id"`
	Name                 string             `json:"name"`
	Slug                 string             `json:"slug"`
	GithubRepository     string             `json:"github_repository"`
	GithubInstallationID pgtype.UUID        `json:"github_installation_id"`
	OrganisationID       pgtype.UUID        `json:"organisation_id"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	DeletedAt            pgtype.Timestamptz `json:"deleted_at"`
}

type ProjectEnvironment struct {
	ID             pgtype.UUID        `json:"id"`
	Name           string             `json:"name"`
	Branch         string             `json:"branch"`
	ProjectID      pgtype.UUID        `json:"project_id"`
	OrganisationID pgtype.UUID        `json:"organisation_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

type Region struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Code      string             `json:"code"`
	Country   string             `json:"country"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Session struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type SslCert struct {
	ID        pgtype.UUID        `json:"id"`
	Key       string             `json:"key"`
	Value     string             `json:"value"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type SslLock struct {
	ID        pgtype.UUID        `json:"id"`
	Key       string             `json:"key"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type User struct {
	ID              pgtype.UUID        `json:"id"`
	Name            string             `json:"name"`
	Email           string             `json:"email"`
	Username        string             `json:"username"`
	GithubAccountID pgtype.Int4        `json:"github_account_id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
}

type Waitlist struct {
	ID        pgtype.UUID        `json:"id"`
	Email     string             `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}
