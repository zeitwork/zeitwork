// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: deployment_instances.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deploymentInstancesCreate = `-- name: DeploymentInstancesCreate :one
INSERT INTO deployment_instances (
    id,
    deployment_id,
    instance_id,
    organisation_id
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING 
    id,
    deployment_id,
    instance_id,
    organisation_id,
    created_at,
    updated_at
`

type DeploymentInstancesCreateParams struct {
	ID             pgtype.UUID `json:"id"`
	DeploymentID   pgtype.UUID `json:"deployment_id"`
	InstanceID     pgtype.UUID `json:"instance_id"`
	OrganisationID pgtype.UUID `json:"organisation_id"`
}

type DeploymentInstancesCreateRow struct {
	ID             pgtype.UUID        `json:"id"`
	DeploymentID   pgtype.UUID        `json:"deployment_id"`
	InstanceID     pgtype.UUID        `json:"instance_id"`
	OrganisationID pgtype.UUID        `json:"organisation_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

// Create a new deployment instance relationship
func (q *Queries) DeploymentInstancesCreate(ctx context.Context, arg *DeploymentInstancesCreateParams) (*DeploymentInstancesCreateRow, error) {
	row := q.db.QueryRow(ctx, deploymentInstancesCreate,
		arg.ID,
		arg.DeploymentID,
		arg.InstanceID,
		arg.OrganisationID,
	)
	var i DeploymentInstancesCreateRow
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.InstanceID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deploymentInstancesDelete = `-- name: DeploymentInstancesDelete :exec
UPDATE deployment_instances 
SET deleted_at = now(), 
    updated_at = now()
WHERE id = $1
`

// Soft delete a deployment instance
func (q *Queries) DeploymentInstancesDelete(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deploymentInstancesDelete, id)
	return err
}

const deploymentInstancesGetByDeployment = `-- name: DeploymentInstancesGetByDeployment :many
SELECT 
    id,
    deployment_id,
    instance_id,
    created_at,
    updated_at
FROM deployment_instances 
WHERE deployment_id = $1 
    AND deleted_at IS NULL
`

type DeploymentInstancesGetByDeploymentRow struct {
	ID           pgtype.UUID        `json:"id"`
	DeploymentID pgtype.UUID        `json:"deployment_id"`
	InstanceID   pgtype.UUID        `json:"instance_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

// Get deployment instances by deployment ID
func (q *Queries) DeploymentInstancesGetByDeployment(ctx context.Context, deploymentID pgtype.UUID) ([]*DeploymentInstancesGetByDeploymentRow, error) {
	rows, err := q.db.Query(ctx, deploymentInstancesGetByDeployment, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DeploymentInstancesGetByDeploymentRow
	for rows.Next() {
		var i DeploymentInstancesGetByDeploymentRow
		if err := rows.Scan(
			&i.ID,
			&i.DeploymentID,
			&i.InstanceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deploymentInstancesGetByInstance = `-- name: DeploymentInstancesGetByInstance :one
SELECT 
    id,
    deployment_id,
    instance_id,
    created_at,
    updated_at
FROM deployment_instances 
WHERE instance_id = $1 
    AND deleted_at IS NULL
`

type DeploymentInstancesGetByInstanceRow struct {
	ID           pgtype.UUID        `json:"id"`
	DeploymentID pgtype.UUID        `json:"deployment_id"`
	InstanceID   pgtype.UUID        `json:"instance_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

// Get deployment instance by instance ID
func (q *Queries) DeploymentInstancesGetByInstance(ctx context.Context, instanceID pgtype.UUID) (*DeploymentInstancesGetByInstanceRow, error) {
	row := q.db.QueryRow(ctx, deploymentInstancesGetByInstance, instanceID)
	var i DeploymentInstancesGetByInstanceRow
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.InstanceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
