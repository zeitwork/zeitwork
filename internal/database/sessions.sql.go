// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const sessionCreate = `-- name: SessionCreate :one
INSERT INTO sessions (user_id, token, expires_at) VALUES ($1, $2, $3) RETURNING id, user_id, token, expires_at, created_at, updated_at, deleted_at
`

type SessionCreateParams struct {
	UserID    pgtype.UUID        `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) SessionCreate(ctx context.Context, arg *SessionCreateParams) (*Session, error) {
	row := q.db.QueryRow(ctx, sessionCreate, arg.UserID, arg.Token, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const sessionDelete = `-- name: SessionDelete :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) SessionDelete(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, sessionDelete, id)
	return err
}

const sessionDeleteByToken = `-- name: SessionDeleteByToken :exec
DELETE FROM sessions WHERE token = $1
`

func (q *Queries) SessionDeleteByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, sessionDeleteByToken, token)
	return err
}

const sessionDeleteExpired = `-- name: SessionDeleteExpired :exec
DELETE FROM sessions WHERE expires_at < NOW()
`

func (q *Queries) SessionDeleteExpired(ctx context.Context) error {
	_, err := q.db.Exec(ctx, sessionDeleteExpired)
	return err
}

const sessionFindActive = `-- name: SessionFindActive :many
SELECT id, user_id, token, expires_at, created_at, updated_at, deleted_at FROM sessions WHERE expires_at > NOW() ORDER BY created_at DESC
`

func (q *Queries) SessionFindActive(ctx context.Context) ([]*Session, error) {
	rows, err := q.db.Query(ctx, sessionFindActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessionFindById = `-- name: SessionFindById :one
SELECT id, user_id, token, expires_at, created_at, updated_at, deleted_at FROM sessions WHERE id = $1
`

func (q *Queries) SessionFindById(ctx context.Context, id pgtype.UUID) (*Session, error) {
	row := q.db.QueryRow(ctx, sessionFindById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const sessionFindByToken = `-- name: SessionFindByToken :one
SELECT id, user_id, token, expires_at, created_at, updated_at, deleted_at FROM sessions WHERE token = $1
`

func (q *Queries) SessionFindByToken(ctx context.Context, token string) (*Session, error) {
	row := q.db.QueryRow(ctx, sessionFindByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const sessionFindByUser = `-- name: SessionFindByUser :many
SELECT id, user_id, token, expires_at, created_at, updated_at, deleted_at FROM sessions WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) SessionFindByUser(ctx context.Context, userID pgtype.UUID) ([]*Session, error) {
	rows, err := q.db.Query(ctx, sessionFindByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessionUpdate = `-- name: SessionUpdate :one
UPDATE sessions SET expires_at = $2, updated_at = NOW() WHERE id = $1 RETURNING id, user_id, token, expires_at, created_at, updated_at, deleted_at
`

type SessionUpdateParams struct {
	ID        pgtype.UUID        `json:"id"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) SessionUpdate(ctx context.Context, arg *SessionUpdateParams) (*Session, error) {
	row := q.db.QueryRow(ctx, sessionUpdate, arg.ID, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
