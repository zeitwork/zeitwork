// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userCreate = `-- name: UserCreate :one
INSERT INTO users (name, email, username, github_user_id) VALUES ($1, $2, $3, $4) RETURNING id, name, email, username, github_user_id, created_at, updated_at, deleted_at
`

type UserCreateParams struct {
	Name         string      `json:"name"`
	Email        string      `json:"email"`
	Username     string      `json:"username"`
	GithubUserID pgtype.Int4 `json:"github_user_id"`
}

func (q *Queries) UserCreate(ctx context.Context, arg *UserCreateParams) (*User, error) {
	row := q.db.QueryRow(ctx, userCreate,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.GithubUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.GithubUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const userDelete = `-- name: UserDelete :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) UserDelete(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, userDelete, id)
	return err
}

const userFind = `-- name: UserFind :many
SELECT id, name, email, username, github_user_id, created_at, updated_at, deleted_at FROM users ORDER BY created_at DESC
`

func (q *Queries) UserFind(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, userFind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Username,
			&i.GithubUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userFindByEmail = `-- name: UserFindByEmail :one
SELECT id, name, email, username, github_user_id, created_at, updated_at, deleted_at FROM users WHERE email = $1
`

func (q *Queries) UserFindByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, userFindByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.GithubUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const userFindByGithubId = `-- name: UserFindByGithubId :one
SELECT id, name, email, username, github_user_id, created_at, updated_at, deleted_at FROM users WHERE github_user_id = $1
`

func (q *Queries) UserFindByGithubId(ctx context.Context, githubUserID pgtype.Int4) (*User, error) {
	row := q.db.QueryRow(ctx, userFindByGithubId, githubUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.GithubUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const userFindById = `-- name: UserFindById :one
SELECT id, name, email, username, github_user_id, created_at, updated_at, deleted_at FROM users WHERE id = $1
`

func (q *Queries) UserFindById(ctx context.Context, id pgtype.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, userFindById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.GithubUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const userFindByUsername = `-- name: UserFindByUsername :one
SELECT id, name, email, username, github_user_id, created_at, updated_at, deleted_at FROM users WHERE username = $1
`

func (q *Queries) UserFindByUsername(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRow(ctx, userFindByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.GithubUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const userUpdate = `-- name: UserUpdate :one
UPDATE users SET name = $2, username = $3, github_user_id = $4, updated_at = NOW() WHERE id = $1 RETURNING id, name, email, username, github_user_id, created_at, updated_at, deleted_at
`

type UserUpdateParams struct {
	ID           pgtype.UUID `json:"id"`
	Name         string      `json:"name"`
	Username     string      `json:"username"`
	GithubUserID pgtype.Int4 `json:"github_user_id"`
}

func (q *Queries) UserUpdate(ctx context.Context, arg *UserUpdateParams) (*User, error) {
	row := q.db.QueryRow(ctx, userUpdate,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.GithubUserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.GithubUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
