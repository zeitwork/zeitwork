// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: nodes.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/jackc/pgx/v5/pgtype"
)

const getNodeByID = `-- name: GetNodeByID :one
SELECT 
    id,
    region_id,
    hostname,
    ip_address,
    state,
    resources,
    created_at,
    updated_at
FROM nodes
WHERE id = $1
`

type GetNodeByIDRow struct {
	ID        pgtype.UUID        `json:"id"`
	RegionID  pgtype.UUID        `json:"region_id"`
	Hostname  string             `json:"hostname"`
	IpAddress string             `json:"ip_address"`
	State     string             `json:"state"`
	Resources json.RawMessage    `json:"resources"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetNodeByID(ctx context.Context, id pgtype.UUID) (*GetNodeByIDRow, error) {
	row := q.db.QueryRow(ctx, getNodeByID, id)
	var i GetNodeByIDRow
	err := row.Scan(
		&i.ID,
		&i.RegionID,
		&i.Hostname,
		&i.IpAddress,
		&i.State,
		&i.Resources,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateNodeState = `-- name: UpdateNodeState :exec
UPDATE nodes
SET state = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateNodeStateParams struct {
	ID    pgtype.UUID `json:"id"`
	State string      `json:"state"`
}

func (q *Queries) UpdateNodeState(ctx context.Context, arg *UpdateNodeStateParams) error {
	_, err := q.db.Exec(ctx, updateNodeState, arg.ID, arg.State)
	return err
}

const upsertNode = `-- name: UpsertNode :exec
INSERT INTO nodes (
    id,
    region_id,
    hostname,
    ip_address,
    state,
    resources,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, NOW(), NOW()
)
ON CONFLICT (id) 
DO UPDATE SET
    hostname = EXCLUDED.hostname,
    ip_address = EXCLUDED.ip_address,
    state = EXCLUDED.state,
    resources = EXCLUDED.resources,
    updated_at = NOW()
`

type UpsertNodeParams struct {
	ID        pgtype.UUID     `json:"id"`
	RegionID  pgtype.UUID     `json:"region_id"`
	Hostname  string          `json:"hostname"`
	IpAddress string          `json:"ip_address"`
	State     string          `json:"state"`
	Resources json.RawMessage `json:"resources"`
}

func (q *Queries) UpsertNode(ctx context.Context, arg *UpsertNodeParams) error {
	_, err := q.db.Exec(ctx, upsertNode,
		arg.ID,
		arg.RegionID,
		arg.Hostname,
		arg.IpAddress,
		arg.State,
		arg.Resources,
	)
	return err
}
