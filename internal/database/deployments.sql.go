// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: deployments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deploymentCreate = `-- name: DeploymentCreate :one
INSERT INTO deployments (
    project_id, project_environment_id, status, commit_hash, image_id, organisation_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at
`

type DeploymentCreateParams struct {
	ProjectID            pgtype.UUID `json:"project_id"`
	ProjectEnvironmentID pgtype.UUID `json:"project_environment_id"`
	Status               string      `json:"status"`
	CommitHash           string      `json:"commit_hash"`
	ImageID              pgtype.UUID `json:"image_id"`
	OrganisationID       pgtype.UUID `json:"organisation_id"`
}

func (q *Queries) DeploymentCreate(ctx context.Context, arg *DeploymentCreateParams) (*Deployment, error) {
	row := q.db.QueryRow(ctx, deploymentCreate,
		arg.ProjectID,
		arg.ProjectEnvironmentID,
		arg.Status,
		arg.CommitHash,
		arg.ImageID,
		arg.OrganisationID,
	)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ProjectEnvironmentID,
		&i.Status,
		&i.CommitHash,
		&i.ImageID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deploymentDelete = `-- name: DeploymentDelete :exec
DELETE FROM deployments WHERE id = $1
`

func (q *Queries) DeploymentDelete(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deploymentDelete, id)
	return err
}

const deploymentFind = `-- name: DeploymentFind :many
SELECT id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at FROM deployments ORDER BY created_at DESC
`

func (q *Queries) DeploymentFind(ctx context.Context) ([]*Deployment, error) {
	rows, err := q.db.Query(ctx, deploymentFind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.ProjectEnvironmentID,
			&i.Status,
			&i.CommitHash,
			&i.ImageID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deploymentFindByEnvironment = `-- name: DeploymentFindByEnvironment :many
SELECT id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at FROM deployments WHERE project_environment_id = $1 ORDER BY created_at DESC
`

func (q *Queries) DeploymentFindByEnvironment(ctx context.Context, projectEnvironmentID pgtype.UUID) ([]*Deployment, error) {
	rows, err := q.db.Query(ctx, deploymentFindByEnvironment, projectEnvironmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.ProjectEnvironmentID,
			&i.Status,
			&i.CommitHash,
			&i.ImageID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deploymentFindById = `-- name: DeploymentFindById :one
SELECT id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at FROM deployments WHERE id = $1
`

func (q *Queries) DeploymentFindById(ctx context.Context, id pgtype.UUID) (*Deployment, error) {
	row := q.db.QueryRow(ctx, deploymentFindById, id)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ProjectEnvironmentID,
		&i.Status,
		&i.CommitHash,
		&i.ImageID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deploymentFindByImage = `-- name: DeploymentFindByImage :many
SELECT id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at FROM deployments WHERE image_id = $1 ORDER BY created_at DESC
`

func (q *Queries) DeploymentFindByImage(ctx context.Context, imageID pgtype.UUID) ([]*Deployment, error) {
	rows, err := q.db.Query(ctx, deploymentFindByImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.ProjectEnvironmentID,
			&i.Status,
			&i.CommitHash,
			&i.ImageID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deploymentFindByProject = `-- name: DeploymentFindByProject :many
SELECT id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at FROM deployments WHERE project_id = $1 ORDER BY created_at DESC
`

func (q *Queries) DeploymentFindByProject(ctx context.Context, projectID pgtype.UUID) ([]*Deployment, error) {
	rows, err := q.db.Query(ctx, deploymentFindByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.ProjectEnvironmentID,
			&i.Status,
			&i.CommitHash,
			&i.ImageID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deploymentFindByStatus = `-- name: DeploymentFindByStatus :many
SELECT id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at FROM deployments WHERE status = $1 ORDER BY created_at DESC
`

func (q *Queries) DeploymentFindByStatus(ctx context.Context, status string) ([]*Deployment, error) {
	rows, err := q.db.Query(ctx, deploymentFindByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.ProjectEnvironmentID,
			&i.Status,
			&i.CommitHash,
			&i.ImageID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deploymentInstanceCreate = `-- name: DeploymentInstanceCreate :one
INSERT INTO deployment_instances (deployment_id, instance_id, organisation_id) VALUES ($1, $2, $3) RETURNING id, deployment_id, instance_id, organisation_id, created_at, updated_at, deleted_at
`

type DeploymentInstanceCreateParams struct {
	DeploymentID   pgtype.UUID `json:"deployment_id"`
	InstanceID     pgtype.UUID `json:"instance_id"`
	OrganisationID pgtype.UUID `json:"organisation_id"`
}

func (q *Queries) DeploymentInstanceCreate(ctx context.Context, arg *DeploymentInstanceCreateParams) (*DeploymentInstance, error) {
	row := q.db.QueryRow(ctx, deploymentInstanceCreate, arg.DeploymentID, arg.InstanceID, arg.OrganisationID)
	var i DeploymentInstance
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.InstanceID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deploymentInstanceDelete = `-- name: DeploymentInstanceDelete :exec
DELETE FROM deployment_instances WHERE id = $1
`

func (q *Queries) DeploymentInstanceDelete(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deploymentInstanceDelete, id)
	return err
}

const deploymentInstanceFindByDeployment = `-- name: DeploymentInstanceFindByDeployment :many
SELECT id, deployment_id, instance_id, organisation_id, created_at, updated_at, deleted_at FROM deployment_instances WHERE deployment_id = $1 ORDER BY created_at DESC
`

func (q *Queries) DeploymentInstanceFindByDeployment(ctx context.Context, deploymentID pgtype.UUID) ([]*DeploymentInstance, error) {
	rows, err := q.db.Query(ctx, deploymentInstanceFindByDeployment, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DeploymentInstance
	for rows.Next() {
		var i DeploymentInstance
		if err := rows.Scan(
			&i.ID,
			&i.DeploymentID,
			&i.InstanceID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deploymentInstanceFindById = `-- name: DeploymentInstanceFindById :one
SELECT id, deployment_id, instance_id, organisation_id, created_at, updated_at, deleted_at FROM deployment_instances WHERE id = $1
`

func (q *Queries) DeploymentInstanceFindById(ctx context.Context, id pgtype.UUID) (*DeploymentInstance, error) {
	row := q.db.QueryRow(ctx, deploymentInstanceFindById, id)
	var i DeploymentInstance
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.InstanceID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deploymentInstanceFindByInstance = `-- name: DeploymentInstanceFindByInstance :many
SELECT id, deployment_id, instance_id, organisation_id, created_at, updated_at, deleted_at FROM deployment_instances WHERE instance_id = $1 ORDER BY created_at DESC
`

func (q *Queries) DeploymentInstanceFindByInstance(ctx context.Context, instanceID pgtype.UUID) ([]*DeploymentInstance, error) {
	rows, err := q.db.Query(ctx, deploymentInstanceFindByInstance, instanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DeploymentInstance
	for rows.Next() {
		var i DeploymentInstance
		if err := rows.Scan(
			&i.ID,
			&i.DeploymentID,
			&i.InstanceID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deploymentUpdateImage = `-- name: DeploymentUpdateImage :one
UPDATE deployments SET image_id = $2, updated_at = NOW() WHERE id = $1 RETURNING id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at
`

type DeploymentUpdateImageParams struct {
	ID      pgtype.UUID `json:"id"`
	ImageID pgtype.UUID `json:"image_id"`
}

func (q *Queries) DeploymentUpdateImage(ctx context.Context, arg *DeploymentUpdateImageParams) (*Deployment, error) {
	row := q.db.QueryRow(ctx, deploymentUpdateImage, arg.ID, arg.ImageID)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ProjectEnvironmentID,
		&i.Status,
		&i.CommitHash,
		&i.ImageID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deploymentUpdateStatus = `-- name: DeploymentUpdateStatus :one
UPDATE deployments SET status = $2, updated_at = NOW() WHERE id = $1 RETURNING id, project_id, project_environment_id, status, commit_hash, image_id, organisation_id, created_at, updated_at, deleted_at
`

type DeploymentUpdateStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status string      `json:"status"`
}

func (q *Queries) DeploymentUpdateStatus(ctx context.Context, arg *DeploymentUpdateStatusParams) (*Deployment, error) {
	row := q.db.QueryRow(ctx, deploymentUpdateStatus, arg.ID, arg.Status)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ProjectEnvironmentID,
		&i.Status,
		&i.CommitHash,
		&i.ImageID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
