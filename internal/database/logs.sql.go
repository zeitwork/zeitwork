// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: logs.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLogsByDeploymentId = `-- name: GetLogsByDeploymentId :many
SELECT l.id, l.image_build_id, l.instance_id, l.level, l.message, l.logged_at, l.created_at, l.updated_at, l.deleted_at FROM logs l
LEFT JOIN image_builds ib ON l.image_build_id = ib.id
LEFT JOIN deployments d1 ON ib.id = d1.image_build_id
LEFT JOIN instances i ON l.instance_id = i.id
LEFT JOIN deployment_instances di ON i.id = di.instance_id
LEFT JOIN deployments d2 ON di.deployment_id = d2.id
WHERE d1.id = $1 OR d2.id = $1
ORDER BY l.logged_at ASC
`

func (q *Queries) GetLogsByDeploymentId(ctx context.Context, id pgtype.UUID) ([]*Log, error) {
	rows, err := q.db.Query(ctx, getLogsByDeploymentId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.ImageBuildID,
			&i.InstanceID,
			&i.Level,
			&i.Message,
			&i.LoggedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogsByImageBuildId = `-- name: GetLogsByImageBuildId :many
SELECT id, image_build_id, instance_id, level, message, logged_at, created_at, updated_at, deleted_at FROM logs
WHERE image_build_id = $1
ORDER BY logged_at ASC
`

func (q *Queries) GetLogsByImageBuildId(ctx context.Context, imageBuildID pgtype.UUID) ([]*Log, error) {
	rows, err := q.db.Query(ctx, getLogsByImageBuildId, imageBuildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.ImageBuildID,
			&i.InstanceID,
			&i.Level,
			&i.Message,
			&i.LoggedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogsByInstanceId = `-- name: GetLogsByInstanceId :many
SELECT id, image_build_id, instance_id, level, message, logged_at, created_at, updated_at, deleted_at FROM logs
WHERE instance_id = $1
ORDER BY logged_at ASC
`

func (q *Queries) GetLogsByInstanceId(ctx context.Context, instanceID pgtype.UUID) ([]*Log, error) {
	rows, err := q.db.Query(ctx, getLogsByInstanceId, instanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.ImageBuildID,
			&i.InstanceID,
			&i.Level,
			&i.Message,
			&i.LoggedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertLogsParams struct {
	ID           pgtype.UUID        `json:"id"`
	ImageBuildID pgtype.UUID        `json:"image_build_id"`
	InstanceID   pgtype.UUID        `json:"instance_id"`
	Level        pgtype.Text        `json:"level"`
	Message      string             `json:"message"`
	LoggedAt     pgtype.Timestamptz `json:"logged_at"`
}
