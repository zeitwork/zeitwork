// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: routes.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getActiveRoutes = `-- name: GetActiveRoutes :many
SELECT 
    d.name as domain_name,
    i.id as instance_id,
    i.ip_address,
    i.default_port,
    i.region_id
FROM domains d
INNER JOIN deployments dep ON d.deployment_id = dep.id
INNER JOIN deployment_instances di ON di.deployment_id = dep.id
INNER JOIN instances i ON di.instance_id = i.id
WHERE d.deleted_at IS NULL
  AND dep.deleted_at IS NULL
  AND dep.status = 'active'
  AND i.state = 'running'
  AND i.deleted_at IS NULL
ORDER BY d.name, i.created_at DESC
`

type GetActiveRoutesRow struct {
	DomainName  string      `json:"domain_name"`
	InstanceID  pgtype.UUID `json:"instance_id"`
	IpAddress   string      `json:"ip_address"`
	DefaultPort int32       `json:"default_port"`
	RegionID    pgtype.UUID `json:"region_id"`
}

func (q *Queries) GetActiveRoutes(ctx context.Context) ([]*GetActiveRoutesRow, error) {
	rows, err := q.db.Query(ctx, getActiveRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetActiveRoutesRow
	for rows.Next() {
		var i GetActiveRoutesRow
		if err := rows.Scan(
			&i.DomainName,
			&i.InstanceID,
			&i.IpAddress,
			&i.DefaultPort,
			&i.RegionID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
