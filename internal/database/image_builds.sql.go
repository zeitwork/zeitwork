// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: image_builds.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (
    id,
    name,
    size,
    hash,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, NOW(), NOW()
)
RETURNING id, name, size, hash, created_at, updated_at, deleted_at
`

type CreateImageParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
	Size pgtype.Int4 `json:"size"`
	Hash string      `json:"hash"`
}

func (q *Queries) CreateImage(ctx context.Context, arg *CreateImageParams) (*Image, error) {
	row := q.db.QueryRow(ctx, createImage,
		arg.ID,
		arg.Name,
		arg.Size,
		arg.Hash,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getPendingImageBuild = `-- name: GetPendingImageBuild :one
SELECT 
    id,
    status,
    github_repository,
    github_commit,
    github_installation_id,
    image_id,
    started_at,
    completed_at,
    failed_at,
    created_at,
    updated_at
FROM image_builds
WHERE status = 'pending'
  AND started_at IS NULL
ORDER BY created_at ASC
LIMIT 1
FOR UPDATE SKIP LOCKED
`

type GetPendingImageBuildRow struct {
	ID                   pgtype.UUID        `json:"id"`
	Status               ImageBuildStatus   `json:"status"`
	GithubRepository     string             `json:"github_repository"`
	GithubCommit         string             `json:"github_commit"`
	GithubInstallationID pgtype.UUID        `json:"github_installation_id"`
	ImageID              pgtype.UUID        `json:"image_id"`
	StartedAt            pgtype.Timestamptz `json:"started_at"`
	CompletedAt          pgtype.Timestamptz `json:"completed_at"`
	FailedAt             pgtype.Timestamptz `json:"failed_at"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetPendingImageBuild(ctx context.Context) (*GetPendingImageBuildRow, error) {
	row := q.db.QueryRow(ctx, getPendingImageBuild)
	var i GetPendingImageBuildRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.GithubRepository,
		&i.GithubCommit,
		&i.GithubInstallationID,
		&i.ImageID,
		&i.StartedAt,
		&i.CompletedAt,
		&i.FailedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateImageBuildCompleted = `-- name: UpdateImageBuildCompleted :exec
UPDATE image_builds
SET 
    status = 'completed',
    image_id = $2,
    completed_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

type UpdateImageBuildCompletedParams struct {
	ID      pgtype.UUID `json:"id"`
	ImageID pgtype.UUID `json:"image_id"`
}

func (q *Queries) UpdateImageBuildCompleted(ctx context.Context, arg *UpdateImageBuildCompletedParams) error {
	_, err := q.db.Exec(ctx, updateImageBuildCompleted, arg.ID, arg.ImageID)
	return err
}

const updateImageBuildFailed = `-- name: UpdateImageBuildFailed :exec
UPDATE image_builds
SET 
    status = 'failed',
    failed_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateImageBuildFailed(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateImageBuildFailed, id)
	return err
}

const updateImageBuildStarted = `-- name: UpdateImageBuildStarted :exec
UPDATE image_builds
SET 
    status = 'building',
    started_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateImageBuildStarted(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateImageBuildStarted, id)
	return err
}
