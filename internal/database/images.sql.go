// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: images.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const imagesCreate = `-- name: ImagesCreate :one
INSERT INTO images (
    id,
    name,
    size,
    hash
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING 
    id,
    name,
    size,
    hash,
    created_at,
    updated_at
`

type ImagesCreateParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
	Size pgtype.Int4 `json:"size"`
	Hash string      `json:"hash"`
}

type ImagesCreateRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Size      pgtype.Int4        `json:"size"`
	Hash      string             `json:"hash"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Create a new image
func (q *Queries) ImagesCreate(ctx context.Context, arg *ImagesCreateParams) (*ImagesCreateRow, error) {
	row := q.db.QueryRow(ctx, imagesCreate,
		arg.ID,
		arg.Name,
		arg.Size,
		arg.Hash,
	)
	var i ImagesCreateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const imagesGetAll = `-- name: ImagesGetAll :many
SELECT 
    id,
    name,
    size,
    hash,
    created_at,
    updated_at
FROM images 
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

type ImagesGetAllRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Size      pgtype.Int4        `json:"size"`
	Hash      string             `json:"hash"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get all images
func (q *Queries) ImagesGetAll(ctx context.Context) ([]*ImagesGetAllRow, error) {
	rows, err := q.db.Query(ctx, imagesGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ImagesGetAllRow
	for rows.Next() {
		var i ImagesGetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Size,
			&i.Hash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const imagesGetByHash = `-- name: ImagesGetByHash :one
SELECT 
    id,
    name,
    size,
    hash,
    created_at,
    updated_at
FROM images 
WHERE hash = $1 
    AND deleted_at IS NULL
`

type ImagesGetByHashRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Size      pgtype.Int4        `json:"size"`
	Hash      string             `json:"hash"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get image by hash
func (q *Queries) ImagesGetByHash(ctx context.Context, hash string) (*ImagesGetByHashRow, error) {
	row := q.db.QueryRow(ctx, imagesGetByHash, hash)
	var i ImagesGetByHashRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const imagesGetById = `-- name: ImagesGetById :one
SELECT 
    id,
    name,
    size,
    hash,
    created_at,
    updated_at
FROM images 
WHERE id = $1 
    AND deleted_at IS NULL
`

type ImagesGetByIdRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Size      pgtype.Int4        `json:"size"`
	Hash      string             `json:"hash"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get image by ID
func (q *Queries) ImagesGetById(ctx context.Context, id pgtype.UUID) (*ImagesGetByIdRow, error) {
	row := q.db.QueryRow(ctx, imagesGetById, id)
	var i ImagesGetByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const imagesUpdate = `-- name: ImagesUpdate :one
UPDATE images 
SET name = $2, 
    size = $3,
    hash = $4,
    updated_at = now()
WHERE id = $1
RETURNING 
    id,
    name,
    size,
    hash,
    created_at,
    updated_at
`

type ImagesUpdateParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
	Size pgtype.Int4 `json:"size"`
	Hash string      `json:"hash"`
}

type ImagesUpdateRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Size      pgtype.Int4        `json:"size"`
	Hash      string             `json:"hash"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Update image
func (q *Queries) ImagesUpdate(ctx context.Context, arg *ImagesUpdateParams) (*ImagesUpdateRow, error) {
	row := q.db.QueryRow(ctx, imagesUpdate,
		arg.ID,
		arg.Name,
		arg.Size,
		arg.Hash,
	)
	var i ImagesUpdateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
