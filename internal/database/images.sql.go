// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: images.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const imagesCreate = `-- name: ImagesCreate :one
INSERT INTO images (
    id,
    name,
    status,
    image_size,
    image_hash,
    object_key
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING 
    id,
    name,
    status,
    image_size,
    image_hash,
    object_key,
    created_at,
    updated_at
`

type ImagesCreateParams struct {
	ID        pgtype.UUID `json:"id"`
	Name      string      `json:"name"`
	Status    string      `json:"status"`
	ImageSize pgtype.Int4 `json:"image_size"`
	ImageHash string      `json:"image_hash"`
	ObjectKey pgtype.Text `json:"object_key"`
}

type ImagesCreateRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Status    string             `json:"status"`
	ImageSize pgtype.Int4        `json:"image_size"`
	ImageHash string             `json:"image_hash"`
	ObjectKey pgtype.Text        `json:"object_key"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Create a new image
func (q *Queries) ImagesCreate(ctx context.Context, arg *ImagesCreateParams) (*ImagesCreateRow, error) {
	row := q.db.QueryRow(ctx, imagesCreate,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.ImageSize,
		arg.ImageHash,
		arg.ObjectKey,
	)
	var i ImagesCreateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.ImageSize,
		&i.ImageHash,
		&i.ObjectKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const imagesGetAll = `-- name: ImagesGetAll :many
SELECT 
    id,
    name,
    status,
    image_size,
    image_hash,
    object_key,
    created_at,
    updated_at
FROM images 
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

type ImagesGetAllRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Status    string             `json:"status"`
	ImageSize pgtype.Int4        `json:"image_size"`
	ImageHash string             `json:"image_hash"`
	ObjectKey pgtype.Text        `json:"object_key"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get all images
func (q *Queries) ImagesGetAll(ctx context.Context) ([]*ImagesGetAllRow, error) {
	rows, err := q.db.Query(ctx, imagesGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ImagesGetAllRow
	for rows.Next() {
		var i ImagesGetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.ImageSize,
			&i.ImageHash,
			&i.ObjectKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const imagesGetByHash = `-- name: ImagesGetByHash :one
SELECT 
    id,
    name,
    status,
    image_size,
    image_hash,
    object_key,
    created_at,
    updated_at
FROM images 
WHERE image_hash = $1 
    AND deleted_at IS NULL
`

type ImagesGetByHashRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Status    string             `json:"status"`
	ImageSize pgtype.Int4        `json:"image_size"`
	ImageHash string             `json:"image_hash"`
	ObjectKey pgtype.Text        `json:"object_key"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get image by hash
func (q *Queries) ImagesGetByHash(ctx context.Context, imageHash string) (*ImagesGetByHashRow, error) {
	row := q.db.QueryRow(ctx, imagesGetByHash, imageHash)
	var i ImagesGetByHashRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.ImageSize,
		&i.ImageHash,
		&i.ObjectKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const imagesGetById = `-- name: ImagesGetById :one
SELECT 
    id,
    name,
    status,
    image_size,
    image_hash,
    object_key,
    created_at,
    updated_at
FROM images 
WHERE id = $1 
    AND deleted_at IS NULL
`

type ImagesGetByIdRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Status    string             `json:"status"`
	ImageSize pgtype.Int4        `json:"image_size"`
	ImageHash string             `json:"image_hash"`
	ObjectKey pgtype.Text        `json:"object_key"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get image by ID
func (q *Queries) ImagesGetById(ctx context.Context, id pgtype.UUID) (*ImagesGetByIdRow, error) {
	row := q.db.QueryRow(ctx, imagesGetById, id)
	var i ImagesGetByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.ImageSize,
		&i.ImageHash,
		&i.ObjectKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const imagesUpdateStatus = `-- name: ImagesUpdateStatus :one
UPDATE images 
SET status = $2, 
    updated_at = now()
WHERE id = $1
RETURNING 
    id,
    name,
    status,
    image_size,
    image_hash,
    object_key,
    created_at,
    updated_at
`

type ImagesUpdateStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status string      `json:"status"`
}

type ImagesUpdateStatusRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Status    string             `json:"status"`
	ImageSize pgtype.Int4        `json:"image_size"`
	ImageHash string             `json:"image_hash"`
	ObjectKey pgtype.Text        `json:"object_key"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Update image status
func (q *Queries) ImagesUpdateStatus(ctx context.Context, arg *ImagesUpdateStatusParams) (*ImagesUpdateStatusRow, error) {
	row := q.db.QueryRow(ctx, imagesUpdateStatus, arg.ID, arg.Status)
	var i ImagesUpdateStatusRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.ImageSize,
		&i.ImageHash,
		&i.ObjectKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
