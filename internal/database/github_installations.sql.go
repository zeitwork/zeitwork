// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: github_installations.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getGithubInstallation = `-- name: GetGithubInstallation :one
SELECT 
    id,
    user_id,
    github_account_id,
    github_installation_id,
    organisation_id,
    created_at,
    updated_at
FROM github_installations
WHERE id = $1
LIMIT 1
`

type GetGithubInstallationRow struct {
	ID                   pgtype.UUID        `json:"id"`
	UserID               pgtype.UUID        `json:"user_id"`
	GithubAccountID      int32              `json:"github_account_id"`
	GithubInstallationID int32              `json:"github_installation_id"`
	OrganisationID       pgtype.UUID        `json:"organisation_id"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetGithubInstallation(ctx context.Context, id pgtype.UUID) (*GetGithubInstallationRow, error) {
	row := q.db.QueryRow(ctx, getGithubInstallation, id)
	var i GetGithubInstallationRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GithubAccountID,
		&i.GithubInstallationID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
