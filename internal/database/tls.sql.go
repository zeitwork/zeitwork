// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tls.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const tlsCertificateCreate = `-- name: TlsCertificateCreate :one
INSERT INTO tls_certificates (domain, certificate, private_key, expires_at, issuer, auto_renew)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, domain, certificate, private_key, issuer, expires_at, auto_renew, created_at, updated_at, deleted_at
`

type TlsCertificateCreateParams struct {
	Domain      string             `json:"domain"`
	Certificate string             `json:"certificate"`
	PrivateKey  string             `json:"private_key"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	Issuer      string             `json:"issuer"`
	AutoRenew   bool               `json:"auto_renew"`
}

func (q *Queries) TlsCertificateCreate(ctx context.Context, arg *TlsCertificateCreateParams) (*TlsCertificate, error) {
	row := q.db.QueryRow(ctx, tlsCertificateCreate,
		arg.Domain,
		arg.Certificate,
		arg.PrivateKey,
		arg.ExpiresAt,
		arg.Issuer,
		arg.AutoRenew,
	)
	var i TlsCertificate
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Certificate,
		&i.PrivateKey,
		&i.Issuer,
		&i.ExpiresAt,
		&i.AutoRenew,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const tlsCertificateDelete = `-- name: TlsCertificateDelete :exec
DELETE FROM tls_certificates WHERE domain = $1
`

func (q *Queries) TlsCertificateDelete(ctx context.Context, domain string) error {
	_, err := q.db.Exec(ctx, tlsCertificateDelete, domain)
	return err
}

const tlsCertificateFindByDomain = `-- name: TlsCertificateFindByDomain :one
SELECT id, domain, certificate, private_key, issuer, expires_at, auto_renew, created_at, updated_at, deleted_at FROM tls_certificates WHERE domain = $1
`

func (q *Queries) TlsCertificateFindByDomain(ctx context.Context, domain string) (*TlsCertificate, error) {
	row := q.db.QueryRow(ctx, tlsCertificateFindByDomain, domain)
	var i TlsCertificate
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Certificate,
		&i.PrivateKey,
		&i.Issuer,
		&i.ExpiresAt,
		&i.AutoRenew,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const tlsCertificateList = `-- name: TlsCertificateList :many
SELECT id, domain, certificate, private_key, issuer, expires_at, auto_renew, created_at, updated_at, deleted_at FROM tls_certificates ORDER BY domain
`

func (q *Queries) TlsCertificateList(ctx context.Context) ([]*TlsCertificate, error) {
	rows, err := q.db.Query(ctx, tlsCertificateList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TlsCertificate
	for rows.Next() {
		var i TlsCertificate
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Certificate,
			&i.PrivateKey,
			&i.Issuer,
			&i.ExpiresAt,
			&i.AutoRenew,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tlsCertificateUpdate = `-- name: TlsCertificateUpdate :one
UPDATE tls_certificates 
SET certificate = $2, private_key = $3, expires_at = $4, updated_at = NOW()
WHERE domain = $1
RETURNING id, domain, certificate, private_key, issuer, expires_at, auto_renew, created_at, updated_at, deleted_at
`

type TlsCertificateUpdateParams struct {
	Domain      string             `json:"domain"`
	Certificate string             `json:"certificate"`
	PrivateKey  string             `json:"private_key"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) TlsCertificateUpdate(ctx context.Context, arg *TlsCertificateUpdateParams) (*TlsCertificate, error) {
	row := q.db.QueryRow(ctx, tlsCertificateUpdate,
		arg.Domain,
		arg.Certificate,
		arg.PrivateKey,
		arg.ExpiresAt,
	)
	var i TlsCertificate
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Certificate,
		&i.PrivateKey,
		&i.Issuer,
		&i.ExpiresAt,
		&i.AutoRenew,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
