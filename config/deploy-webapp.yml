# Name of your application. Used to uniquely configure containers.
service: zeitwork

# Name of the container image.
image: zeitwork/web

# Deploy to these servers.
servers:
  web:
    hosts:
      # - 67.213.124.173 # [us-west-1]
      # - 67.213.124.177 # [us-west-1]
      # - 67.213.127.209 # [eu-west-1]
      - 67.213.127.213 # [eu-west-1]
    proxy:
      ssl: false
      host: app.zeitwork.com
      app_port: 3000

  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
# proxy:
#   ssl:
#     certificate_pem: CERTIFICATE_PEM
#     private_key_pem: PRIVATE_KEY_PEM
#   host: app.zeitwork.com
#   # Proxy connects to your container on port 80 by default.
#   app_port: 3000
# proxy: false

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  server: ghcr.io
  username: tomhaerter

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  context: .
  dockerfile: docker/web/Dockerfile
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>
# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    NUXT_OAUTH_GITHUB_REDIRECT_URL: https://app.zeitwork.com/auth/github
    NUXT_APP_URL: https://app.zeitwork.com
    NUXT_PUBLIC_POSTHOG_PUBLIC_KEY: "phc_p3FzN1MiqN636w6viR1nmJeKUpedt4bqYHi6BY3d8pI"
    NUXT_PUBLIC_POSTHOG_HOST: https://us.i.posthog.com
    NUXT_PUBLIC_POSTHOG_DEFAULTS: "2025-05-24"
  secret:
    - NUXT_DSN
    - NUXT_SESSION_PASSWORD
    - NUXT_OAUTH_GITHUB_CLIENT_ID
    - NUXT_OAUTH_GITHUB_CLIENT_SECRET
    - NUXT_GITHUB_WEBHOOK_SECRET
    - NUXT_GITHUB_APP_ID
    - NUXT_GITHUB_APP_PRIVATE_KEY
    - NUXT_STRIPE_SECRET_KEY
    - NUXT_STRIPE_WEBHOOK_SECRET
    - NUXT_PUBLIC_STRIPE_PLAN_HOBBY_ID
    - NUXT_PUBLIC_STRIPE_PLAN_BUSINESS_ID

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
ssh:
  user: ubuntu
#
# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
